{"version":3,"sources":["FlagChoices.js","FlagResult.js","FlagDisplay.js","App.js","serviceWorker.js","index.js"],"names":["FlagChoices","state","userChoice","handleChange","e","target","name","value","setState","Number","handleSubmit","preventDefault","props","onGuess","radios","this","options","map","i","id","key","className","type","htmlFor","sty","action","onChange","onSubmit","Component","FlagResult","win","onNext","view","onClick","GAMEPHASE","FlagDisplay","flag","phase","src","alt","App","countries","correctAns","setOptions","length","idx","Math","floor","random","includes","push","userAns","fetch","then","data","json","opts","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65fcea2b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class FlagChoices extends Component {\r\n  state = {\r\n    userChoice: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: Number(value) });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onGuess(this.state.userChoice);\r\n  };\r\n\r\n  render() {\r\n    const { options } = this.props;\r\n\r\n    let radios = options.map(({ id, name }, i) => (\r\n      <section key={i} className='radio'>\r\n        <input id={name} type='radio' name='userChoice' value={id} />\r\n        <label htmlFor={name}>{name}</label>\r\n      </section>\r\n    ));\r\n\r\n    return (\r\n      <form\r\n        sty\r\n        className='child-container'\r\n        action=''\r\n        onChange={this.handleChange}\r\n        onSubmit={this.handleSubmit}\r\n      >\r\n        {radios}\r\n        <button className='child-button'>Guess</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class FlagResult extends Component {\r\n  render() {\r\n    const { win, name, onNext } = this.props;\r\n    const view = (\r\n      <h1>\r\n        {win ? 'You are right!' : 'Too bad..'} The answer is {name}.\r\n      </h1>\r\n    );\r\n\r\n    return (\r\n      <div className='child-container'>\r\n        {view}\r\n        <button onClick={onNext} className='child-button'>\r\n          Next\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport FlagChoices from './FlagChoices';\r\nimport FlagResult from './FlagResult';\r\n\r\nconst GAMEPHASE = {\r\n  ANSWERING: 0,\r\n  CORRECT: 1,\r\n  WRONG: 2,\r\n};\r\nexport { GAMEPHASE };\r\n\r\nexport default class FlagDisplay extends Component {\r\n  render() {\r\n    const { options, flag, name, phase, onNext, onGuess } = this.props;\r\n\r\n    let view;\r\n    if (phase === GAMEPHASE.ANSWERING)\r\n      view = <FlagChoices options={options} onGuess={onGuess} />;\r\n    else if (phase === GAMEPHASE.CORRECT)\r\n      view = <FlagResult win={true} name={name} onNext={onNext} />;\r\n    else view = <FlagResult win={false} name={name} onNext={onNext} />;\r\n\r\n    return (\r\n      <div className='container'>\r\n        <h1>Guess The Flag!</h1>\r\n        {view}\r\n        <img className='image' src={flag} alt={name} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport FlagDisplay, { GAMEPHASE } from './FlagDisplay'\n\n\nexport default class App extends Component {\n\n  state = {\n    countries: [],\n    options: [],\n    correctAns: '',\n    phase: GAMEPHASE.ANSWERING\n  }\n\n  setOptions = (countries) => {\n    let options = [];\n    //Choose 4 indexes randomly\n    while (options.length < 4) {\n      let idx = Math.floor(Math.random() * countries.length)\n      if (!options.includes(idx)) {\n        options.push(idx);\n      }\n    }\n    //Choose a random idx from 'options' as answer\n    let ansIdx = Math.floor(Math.random() * options.length);\n    let correctAns = options[ansIdx];\n    return { options, correctAns };\n  }\n\n  onGuess = (userAns) => {\n    const { correctAns } = this.state;\n    if (userAns === correctAns)\n      this.setState({ phase: GAMEPHASE.CORRECT });\n    else\n      this.setState({ phase: GAMEPHASE.WRONG });\n  }\n\n  onNext = () => {\n    this.setState(state => ({\n      ...this.setOptions(state.countries),\n      phase: GAMEPHASE.ANSWERING\n    }));\n  }\n\n  componentDidMount() {\n    const url = 'https://restcountries.eu/rest/v2/all';\n    fetch(url)\n      .then(data => data.json())\n      .then(data => {\n        let countries = data.map(({ name, flag }) => ({\n          name, flag\n        }));\n        this.setState({ ...this.setOptions(countries), countries });\n      })\n  }\n\n  render() {\n    const { options, correctAns, countries, phase } = this.state;\n\n    let view = <div>Loading...</div>\n    if (correctAns) {\n      // mapping idx to names\n      const opts = options.map(id => ({ id, name: countries[id].name }));\n      const { name, flag } = countries[correctAns];\n\n      view = <FlagDisplay\n        onNext={this.onNext}\n        onGuess={this.onGuess}\n        options={opts}\n        phase={phase}\n        flag={flag}\n        name={name} />\n    }\n\n    return (\n      <div>\n        {view}\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}